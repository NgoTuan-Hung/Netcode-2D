using System;
using System.Collections;
using Game;
using Unity.Netcode;
using UnityEngine;
using UnityEngine.UIElements;

namespace HelloWorld
{
    public class HelloWorldManager : MonoBehaviour
    {
        VisualElement rootVisualElement;
        Button hostButton;
        Button clientButton;
        Button serverButton;
        Button moveButton, moveSpecificClientButton;
        Label statusLabel;
        TextField moveClientIdField;
        Vector3Field moveVectorField;
        NetworkManager networkManager;

        private void Awake() 
        {
            networkManager = GetComponent<NetworkManager>();
            networkManager.ConnectionApprovalCallback = ApprovalCheck;    
        }

        private void ApprovalCheck(NetworkManager.ConnectionApprovalRequest request, NetworkManager.ConnectionApprovalResponse response)
        {
            response.Approved = true;
            response.CreatePlayerObject = true;

            response.PlayerPrefabHash = null;
            response.Pending = true;

            StartCoroutine(SimulatePending(response));
            print("Approved");
        }

        private IEnumerator SimulatePending(NetworkManager.ConnectionApprovalResponse response)
        {
            yield return new WaitForSeconds(3);
            response.Pending = false;
        }

        void OnEnable()
        {
            var uiDocument = GetComponent<UIDocument>();
            rootVisualElement = uiDocument.rootVisualElement;
            
            hostButton = CreateButton("HostButton", "Host");
            clientButton = CreateButton("ClientButton", "Client");
            serverButton = CreateButton("ServerButton", "Server");
            moveButton = CreateButton("MoveButton", "Move");
            statusLabel = CreateLabel("StatusLabel", "Not Connected");
            moveClientIdField = CreateTextField("MoveClientIdField");
            moveVectorField = CreateVectorField();
            moveSpecificClientButton = CreateButton("MoveSpecificClientButton", "Move Specific Client");
            
		    rootVisualElement.Clear();
            rootVisualElement.Add(hostButton);
            rootVisualElement.Add(clientButton);
            rootVisualElement.Add(serverButton);
            rootVisualElement.Add(moveButton);
            rootVisualElement.Add(statusLabel);
            rootVisualElement.Add(moveClientIdField);
            rootVisualElement.Add(moveVectorField);
            rootVisualElement.Add(moveSpecificClientButton);
            
            hostButton.clicked += OnHostButtonClicked;
            clientButton.clicked += OnClientButtonClicked;
            serverButton.clicked += OnServerButtonClicked;
            moveButton.clicked += SubmitNewPosition;
            moveSpecificClientButton.clicked += OnSpecificClientButtonClicked;
        }

        void Start()
        {
            HandleMoveSpecificClientButton();
        }

        void Update()
        {
            UpdateUI();
        }
        
        void OnDisable()
        {
            hostButton.clicked -= OnHostButtonClicked;
            clientButton.clicked -= OnClientButtonClicked;
            serverButton.clicked -= OnServerButtonClicked;
            moveButton.clicked -= SubmitNewPosition;
            moveSpecificClientButton.clicked -= OnSpecificClientButtonClicked;
        }

        void OnHostButtonClicked()
        {
            NetworkManager.Singleton.StartHost();
        }

        void OnClientButtonClicked()
        {
            NetworkManager.Singleton.StartClient();
        }

        void OnServerButtonClicked()
        {
            NetworkManager.Singleton.StartServer();
            moveClientIdField.style.display = DisplayStyle.Flex;
            moveVectorField.style.display = DisplayStyle.Flex;
            moveSpecificClientButton.style.display = DisplayStyle.Flex;
        }

        void OnSpecificClientButtonClicked()
        {
            // get client id index from moveClientIdField
            int clientIdIndex = int.Parse(moveClientIdField.text);
            var playerObject = NetworkManager.Singleton.SpawnManager.GetPlayerNetworkObject(NetworkManager.Singleton.ConnectedClientsIds[clientIdIndex]);
            var player = playerObject.GetComponent<ObjectInfoPacked>();
            player.Position.Value += moveVectorField.value;
        }

        // Disclaimer: This is not the recommended way to create and stylize the UI elements, it is only utilized for the sake of simplicity.
        // The recommended way is to use UXML and USS. Please see this link for more information: https://docs.unity3d.com/Manual/UIE-USS.html
        private Button CreateButton(string name, string text)
        {
            var button = new Button();
            button.name = name;
            button.text = text;
            button.style.width = 240;
            button.style.backgroundColor = Color.white;
            button.style.color = Color.black;
            button.style.unityFontStyleAndWeight = FontStyle.Bold;
            return button;
        }

        private Label CreateLabel(string name, string content)
        {
            var label = new Label();
            label.name = name;
            label.text = content;
            label.style.color = Color.black;
            label.style.fontSize = 18;
            return label;
        }

        private TextField CreateTextField(string name)
        {
            var textField = new TextField();
            textField.name = name;
            textField.style.width = 240;
            return textField;
        }

        private Vector3Field CreateVectorField()
        {
            var vectorField = new Vector3Field();
            vectorField.style.width = 240;
            return vectorField;
        }

        void UpdateUI()
        {
            if (NetworkManager.Singleton == null)
            {
                SetStartButtons(false);
                SetMoveButton(false);
                SetStatusText("NetworkManager not found");
                return;
            }

            if (!NetworkManager.Singleton.IsClient && !NetworkManager.Singleton.IsServer)
            {
                SetStartButtons(true);
                SetMoveButton(false);
                SetStatusText("Not connected");
            }
            else
            {
                SetStartButtons(false);
                SetMoveButton(true);
                UpdateStatusLabels();
            }
        }

        void SetStartButtons(bool state)
        {
            hostButton.style.display = state ? DisplayStyle.Flex : DisplayStyle.None;
            clientButton.style.display = state ? DisplayStyle.Flex : DisplayStyle.None;
            serverButton.style.display = state ? DisplayStyle.Flex : DisplayStyle.None;
        }

        void SetMoveButton(bool state)
        {
            moveButton.style.display = state ? DisplayStyle.Flex : DisplayStyle.None;
            if (state)
            {
                moveButton.text = NetworkManager.Singleton.IsServer ? "Move" : "Request Position Change";
            }
        }

        void SetStatusText(string text) => statusLabel.text = text;

        void UpdateStatusLabels()
        {
            var mode = NetworkManager.Singleton.IsHost ? "Host" : NetworkManager.Singleton.IsServer ? "Server" : "Client";
            string transport = "Transport: " + NetworkManager.Singleton.NetworkConfig.NetworkTransport.GetType().Name;
            string modeText = "Mode: " + mode;
            SetStatusText($"{transport}\n{modeText}");
        }

        void SubmitNewPosition()
        {
            if (NetworkManager.Singleton.IsServer && !NetworkManager.Singleton.IsClient)
            {
                foreach (ulong uid in NetworkManager.Singleton.ConnectedClientsIds)
                {
                    var playerObject = NetworkManager.Singleton.SpawnManager.GetPlayerNetworkObject(uid);
                    var player = playerObject.GetComponent<ObjectInfoPacked>();
                    player.Move();
                }
            }
            else if (NetworkManager.Singleton.IsClient)
            {
                var playerObject = NetworkManager.Singleton.SpawnManager.GetLocalPlayerObject();
                var player = playerObject.GetComponent<ObjectInfoPacked>();
                player.Move();
            }
        }

        void HandleMoveSpecificClientButton()
        {
            moveClientIdField.style.display = DisplayStyle.None;
            moveVectorField.style.display = DisplayStyle.None;
            moveSpecificClientButton.style.display = DisplayStyle.None;
        }
    }
}


--------------------------ObjectInfoPacked-----------------------------
public override void OnNetworkSpawn()
{
    Position.OnValueChanged += OnStateChanged;
}

public override void OnNetworkDespawn()
{
    Position.OnValueChanged -= OnStateChanged;
}

public void OnStateChanged(Vector3 previous, Vector3 current)
{
    // note: `Position.Value` will be equal to `current` here
    // if (Position.Value != previous)
    // {
    //     transform.position = Position.Value;
    // }
}

--------------------------ObjectAnimatorLogic--------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using ExcelDataReader;
using Unity.Netcode;
using UnityEngine;

namespace Game
{
    public class ObjectAnimatorLogic : NetworkBehaviour
    {
        private ObjectInfoPacked objectInfoPacked;
        private NetworkVariable<AnimationTransitionState> currentStateNetvar = new NetworkVariable<AnimationTransitionState>(readPerm: NetworkVariableReadPermission.Owner);
        private AnimationTransitionState currentState;
        private TransitionRule[][] transitionRules;
        private NetworkVariable<bool> onAir = new NetworkVariable<bool>(false);
        private NetworkVariable<bool> prevOnAir = new NetworkVariable<bool>(false);
        private AnimationTransitionState idleState;
        private AnimationTransitionState landState;
        private void Awake() 
        {
            objectInfoPacked = GetComponent<ObjectInfoPacked>();
            LoadTransitionRule();
            idleState = GetStateByName("Idle");
            landState = GetStateByName("Land");

        }

        public override void OnNetworkSpawn()
        {
            currentStateNetvar.OnValueChanged += OnStateChanged;
        }

        private void Start() 
        {
            if (IsServer)
            {
                currentStateNetvar.Value = idleState;
            }    
        }

        public override void OnNetworkDespawn()
        {
            currentStateNetvar.OnValueChanged -= OnStateChanged;
        }

        private void FixedUpdate() 
        {
            if (IsOwner) GroundCheckServerRpc();
        }

        [Rpc(SendTo.Server)]
        public void ChangeStateServerRpc(AnimationTransitionState newState)
        {
            if (!currentState.Equals(newState))
            {
                if (onAir.Value)
                {
                    if (transitionRules[currentState.stateIndex][newState.stateIndex].OnAirOutcome)
                    {
                        PlayState(newState);
                    }
                }
                else
                {
                    if (transitionRules[currentState.stateIndex][newState.stateIndex].OnGroundOutcome)
                    {
                        PlayState(newState);
                    }
                }
            }
        }

        private float acceptableGroundDistance = 0.05f;
        [SerializeField] private List<GroundCheck> groundChecks = new List<GroundCheck>();
        [Rpc(SendTo.Server)]
        public void GroundCheckServerRpc()
        {
            onAir.Value = false;
            for (int i=0;i<groundChecks.Count;i++)
            {
                if (groundChecks[i].Hit.distance > acceptableGroundDistance)
                {
                    onAir.Value = true;
                    break;
                }
            }
            if (!onAir.Value && prevOnAir.Value) {ChangeStateServerRpc(landState);}
            prevOnAir.Value = onAir.Value;
        }

        public delegate void StopStateDelegate();
        public StopStateDelegate stopStateDelegate;
        [Rpc(SendTo.Server)]
        public void StopStateServerRpc(AnimationTransitionState state)
        {
            if (currentState.Equals(state))
            {
                if (onAir.Value) objectInfoPacked.Animator.Play("OnAir", 0, 0);
                else objectInfoPacked.Animator.Play("Idle", 0, 0);
                currentStateNetvar.Value = idleState;
            }

            stopStateDelegate?.Invoke();
            stopStateDelegate = null;
        }

        public void PlayState(AnimationTransitionState state)
        {
            objectInfoPacked.Animator.Play(state.stateName, 0, 0);
            currentStateNetvar.Value = state;
        }

        public AnimationTransitionState GetStateByName(string name)
        {
            return states.FirstOrDefault(state => state.stateName.Equals(name));
        }

        private string transitionRulePath = Application.dataPath + "/Misc/ExcelData/TransitionRule.xlsx";
        private AnimationTransitionState[] states;
        public AnimationTransitionState CurrentState { get => currentState; set => currentState = value; }

        private void LoadTransitionRule()
        {
            if (!File.Exists(transitionRulePath))
            {
                print("TransitionRule file not found!");
                return;
            }

            try
            {
                using (var stream = File.Open(transitionRulePath, FileMode.Open, FileAccess.Read))
                using (var reader = ExcelReaderFactory.CreateReader(stream))
                {
                    var dataSet = reader.AsDataSet();
                    var dataTable = dataSet.Tables[0];
                    object[] rowValues; 
                    int columnIndex, totalStates = dataTable.Columns.Count - 1;
                    string cellValue;
                    string[] values; states = new AnimationTransitionState[totalStates];
                    bool onAirOutcome, onGroundOutcome;

                    // Prepare a 2D array to hold the TransitionRule objects
                    transitionRules = new TransitionRule[totalStates][];

                    // Extract column and row names
                    var rows = dataTable.AsEnumerable().Skip(1).ToArray();

                    int rowIndex = 0;
                    foreach (var row in rows)
                    {
                        transitionRules[rowIndex] = new TransitionRule[dataTable.Columns.Count - 1];
                        rowValues = row.ItemArray;
                        columnIndex = 0;
                        states[rowIndex] = new AnimationTransitionState() 
                        {
                            stateName = rowValues[0].ToString(),
                            stateIndex = rowIndex
                        };
                        foreach (var cell in rowValues.Skip(1)) // Skip the first cell (row header)
                        {
                            cellValue = cell?.ToString();
                            values = cellValue.Split(','); // Split the cell value by comma

                            onAirOutcome = values[0].Trim().Equals("true", StringComparison.OrdinalIgnoreCase);
                            onGroundOutcome = values[1].Trim().Equals("true", StringComparison.OrdinalIgnoreCase);

                            transitionRules[rowIndex][columnIndex] = new TransitionRule(onAirOutcome, onGroundOutcome);
                            columnIndex++;
                        }
                        rowIndex++;
                    }
                }
            }
            catch (Exception ex)
            {
                print($"An error occurred: {ex.Message}");
            }
        }

        public void OnStateChanged(AnimationTransitionState previous, AnimationTransitionState next)
        {
            if (currentStateNetvar.Value != previous)
            {
                currentState = currentStateNetvar.Value;
                print("Current State: " + currentState.stateName);
            }
        }
    }
}

--------------------------GroundCHeck--------------------------

using System;
using Unity.Netcode;
using UnityEngine;

public class GroundCheck : NetworkBehaviour
{
    private readonly int layerMask = Physics2D.AllLayers;
    private bool isGround = false;
    private NetworkVariable<bool> isGroundNetworkVariable = new NetworkVariable<bool>(false);
    private float rayCastDistance = Mathf.Infinity;
    public int LayerMask => layerMask;
    public bool IsGround { get => isGround; set => isGround = value; }
    public float RayCastDistance { get => rayCastDistance; set => rayCastDistance = value; }
    public RaycastHit2D Hit { get => hit; set => hit = value; }

    private void Awake() 
    {
        isGroundNetworkVariable.OnValueChanged += IsGroundOnValueChanged;    
    }

    void IsGroundOnValueChanged(bool previous, bool current)
    {
        isGround = current;
    }

    void FixedUpdate()
    {
        if (IsLocalPlayer) ServerRayCastCheckRpc();
    }

    private RaycastHit2D hit;
    [Rpc(SendTo.Server)]
    void ServerRayCastCheckRpc()
    {
        if (hit = Physics2D.Raycast(transform.position, Vector2.down, rayCastDistance, layerMask))
        {
            isGroundNetworkVariable.Value = true;
        }
        else
        {
            isGroundNetworkVariable.Value = false;
        }
    }
}

--------------------------ObjectMoveable--------------------------

using Unity.Netcode;
using UnityEngine;

namespace Game
{
    public class ObjectMovable : NetworkBehaviour
    {
        private sbyte facingDirection;
        private float moveSpeed;
        private ObjectInfoPacked objectInfoPacked;
        private AnimationTransitionState state;
        public ObjectInfoPacked ObjectInfoPacked { get => objectInfoPacked; set => objectInfoPacked = value; }
        public float MoveSpeed { get => moveSpeed; set => moveSpeed = value; }

        private void Awake() 
        {
            objectInfoPacked = GetComponent<ObjectInfoPacked>();    
        }

        private void Start() 
        {
            state = objectInfoPacked.ObjectAnimatorLogic.GetStateByName("Walk");
        }

        private void FixedUpdate() 
        {
            Move();
        }

        private void Move()
        {
            if (!IsOwner) return;
            Vector3 direction = new Vector3(Input.GetAxis("Horizontal"), 0, Input.GetAxis("Vertical"));

            if (direction != Vector3.zero)
            {
                facingDirection = (sbyte)(direction.x > 0 ? 1 : -1);
                MoveUsingKeySendToServerRpc(direction, facingDirection);
                if (!objectInfoPacked.ObjectAnimatorLogic.CurrentState.Equals(state)) objectInfoPacked.ObjectAnimatorLogic.ChangeStateServerRpc(state);
            }
            else if (objectInfoPacked.ObjectAnimatorLogic.CurrentState.Equals(state)) objectInfoPacked.ObjectAnimatorLogic.StopStateServerRpc(state);
        }

        [Rpc(SendTo.Server)]
        public void MoveUsingKeySendToServerRpc(Vector3 direction, sbyte facingDirection)
        {
            transform.localScale = new Vector3(facingDirection, 1, 1);
            transform.position += direction.normalized * moveSpeed * Time.deltaTime;
        }
    }
}

