//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.0
//     from Assets/Misc/Plugins/UIBeginner/InputSystem/BaseAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @BaseAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BaseAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BaseAction"",
    ""maps"": [
        {
            ""name"": ""BaseMap"",
            ""id"": ""e22c76ff-0bb6-46b1-a094-348db46d5a3d"",
            ""actions"": [
                {
                    ""name"": ""Touch"",
                    ""type"": ""Button"",
                    ""id"": ""a92a01c3-337d-49bd-bcb0-7d89e1b65285"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5e1961aa-373f-4973-936f-ec80537ce998"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""BaseScheme"",
                    ""action"": ""Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""BaseScheme"",
            ""bindingGroup"": ""BaseScheme"",
            ""devices"": []
        }
    ]
}");
        // BaseMap
        m_BaseMap = asset.FindActionMap("BaseMap", throwIfNotFound: true);
        m_BaseMap_Touch = m_BaseMap.FindAction("Touch", throwIfNotFound: true);
    }

    ~@BaseAction()
    {
        UnityEngine.Debug.Assert(!m_BaseMap.enabled, "This will cause a leak and performance issues, BaseAction.BaseMap.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BaseMap
    private readonly InputActionMap m_BaseMap;
    private List<IBaseMapActions> m_BaseMapActionsCallbackInterfaces = new List<IBaseMapActions>();
    private readonly InputAction m_BaseMap_Touch;
    public struct BaseMapActions
    {
        private @BaseAction m_Wrapper;
        public BaseMapActions(@BaseAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Touch => m_Wrapper.m_BaseMap_Touch;
        public InputActionMap Get() { return m_Wrapper.m_BaseMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BaseMapActions set) { return set.Get(); }
        public void AddCallbacks(IBaseMapActions instance)
        {
            if (instance == null || m_Wrapper.m_BaseMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BaseMapActionsCallbackInterfaces.Add(instance);
            @Touch.started += instance.OnTouch;
            @Touch.performed += instance.OnTouch;
            @Touch.canceled += instance.OnTouch;
        }

        private void UnregisterCallbacks(IBaseMapActions instance)
        {
            @Touch.started -= instance.OnTouch;
            @Touch.performed -= instance.OnTouch;
            @Touch.canceled -= instance.OnTouch;
        }

        public void RemoveCallbacks(IBaseMapActions instance)
        {
            if (m_Wrapper.m_BaseMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBaseMapActions instance)
        {
            foreach (var item in m_Wrapper.m_BaseMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BaseMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BaseMapActions @BaseMap => new BaseMapActions(this);
    private int m_BaseSchemeSchemeIndex = -1;
    public InputControlScheme BaseSchemeScheme
    {
        get
        {
            if (m_BaseSchemeSchemeIndex == -1) m_BaseSchemeSchemeIndex = asset.FindControlSchemeIndex("BaseScheme");
            return asset.controlSchemes[m_BaseSchemeSchemeIndex];
        }
    }
    public interface IBaseMapActions
    {
        void OnTouch(InputAction.CallbackContext context);
    }
}
